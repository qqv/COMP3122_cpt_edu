import React, { useState } from 'react'
import {
  Box,
  Container,
  Paper,
  Typography,
  Grid,
  Card,
  CardContent,
  CardActions,
  Button,
  Divider,
  TextField,
  CircularProgress,
  Alert,
  Chip,
  Stack,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material'
import {
  Analytics as AnalyticsIcon,
  Assessment as AssessmentIcon,
  School as SchoolIcon,
  Group as GroupIcon,
  Code as CodeIcon,
  Lightbulb as LightbulbIcon,
  Assignment as AssignmentIcon,
  BugReport as BugReportIcon,
  Insights as InsightsIcon,
  AutoGraph as AutoGraphIcon,
  Psychology as PsychologyIcon
} from '@mui/icons-material'
import Sidebar from '../components/Sidebar'
import { useAuth } from '../contexts/AuthContext'

// 定义AI助手功能类型
interface AssistantFeature {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  action: () => void;
}

export default function Assistant() {
  const { user } = useAuth()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [result, setResult] = useState<any>(null)
  const [activeFeature, setActiveFeature] = useState<string | null>(null)
  const [dialogOpen, setDialogOpen] = useState(false)
  const [customPrompt, setCustomPrompt] = useState('')

  // 处理AI请求
  const handleAIRequest = async (prompt: string, context?: any) => {
    setLoading(true)
    setError(null)
    setResult(null)
    
    try {
      // 这里将来会调用实际的AI API
      console.log('AI Request:', { prompt, context })
      
      // 模拟API调用延迟
      await new Promise(resolve => setTimeout(resolve, 1500))
      
      // 模拟返回结果
      const mockResult = {
        content: `This is the analysis result for "${prompt}". When implemented, this will display the content generated by AI.`,
        timestamp: new Date().toISOString()
      }
      
      setResult(mockResult)
    } catch (err: any) {
      setError(err.message || 'Failed to contact AI assistant')
    } finally {
      setLoading(false)
    }
  }

  // 定义助手功能
  const assistantFeatures: AssistantFeature[] = [
    {
      id: 'course-progress',
      title: 'Course Progress Analysis',
      description: 'Analyze team progress and identify students who need additional support',
      icon: <AutoGraphIcon fontSize="large" color="primary" />,
      action: () => {
        setActiveFeature('course-progress')
        handleAIRequest('Analyze course progress for all teams and identify students needing help')
      }
    },
    {
      id: 'code-quality',
      title: 'Code Quality Assessment',
      description: 'Evaluate student code quality and provide improvement suggestions',
      icon: <CodeIcon fontSize="large" color="primary" />,
      action: () => {
        setActiveFeature('code-quality')
        handleAIRequest('Evaluate code quality and provide best practices')
      }
    },
    {
      id: 'team-collaboration',
      title: 'Team Collaboration',
      description: 'Analyze team dynamics and identify potential collaboration issues',
      icon: <GroupIcon fontSize="large" color="primary" />,
      action: () => {
        setActiveFeature('team-collaboration')
        handleAIRequest('Analyze team collaboration patterns and dynamics')
      }
    },
    {
      id: 'learning-patterns',
      title: 'Learning Patterns',
      description: 'Identify learning patterns and provide personalized teaching recommendations',
      icon: <PsychologyIcon fontSize="large" color="primary" />,
      action: () => {
        setActiveFeature('learning-patterns')
        handleAIRequest('Identify student learning patterns and provide teaching suggestions')
      }
    },
    {
      id: 'common-issues',
      title: 'Common Issues',
      description: 'Identify frequent problems and provide solutions',
      icon: <BugReportIcon fontSize="large" color="primary" />,
      action: () => {
        setActiveFeature('common-issues')
        handleAIRequest('Identify common student issues and provide solutions')
      }
    },
    {
      id: 'custom-query',
      title: 'Custom Query',
      description: 'Ask your own questions or request specific analysis',
      icon: <LightbulbIcon fontSize="large" color="primary" />,
      action: () => {
        setDialogOpen(true)
      }
    }
  ]

  // 处理自定义查询提交
  const handleCustomQuerySubmit = () => {
    if (!customPrompt.trim()) return
    
    setDialogOpen(false)
    setActiveFeature('custom-query')
    handleAIRequest(customPrompt)
    setCustomPrompt('')
  }

  return (
    <Box sx={{ display: 'flex' }}>
      <Sidebar />
      <Box component="main" sx={{ flexGrow: 1, height: '100vh', overflow: 'auto', bgcolor: 'grey.100' }}>
        <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom>
            AI Teaching Assistant
          </Typography>
          <Typography variant="body1" color="text.secondary" paragraph>
            Leverage AI to analyze course data and gain insights to enhance teaching effectiveness.
          </Typography>

          <Grid container spacing={3} sx={{ mb: 4 }}>
            {assistantFeatures.map((feature) => (
              <Grid item xs={12} sm={6} md={4} key={feature.id}>
                <Card 
                  sx={{ 
                    height: '100%', 
                    display: 'flex', 
                    flexDirection: 'column',
                    transition: 'transform 0.2s, box-shadow 0.2s',
                    '&:hover': {
                      transform: 'translateY(-4px)',
                      boxShadow: 4
                    }
                  }}
                >
                  <CardContent sx={{ flexGrow: 1 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
                      {feature.icon}
                    </Box>
                    <Typography variant="h6" component="h2" align="center" gutterBottom>
                      {feature.title}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {feature.description}
                    </Typography>
                  </CardContent>
                  <CardActions>
                    <Button 
                      fullWidth 
                      variant="contained" 
                      onClick={feature.action}
                      disabled={loading}
                    >
                      {loading && activeFeature === feature.id ? 'Processing...' : 'Generate Analysis'}
                    </Button>
                  </CardActions>
                </Card>
              </Grid>
            ))}
          </Grid>

          {/* Results Area */}
          {(loading || error || result) && (
            <Paper sx={{ p: 3, mt: 3 }}>
              {loading && (
                <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
                  <CircularProgress />
                </Box>
              )}
              
              {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  {error}
                </Alert>
              )}
              
              {result && (
                <Box>
                  <Typography variant="h5" gutterBottom>
                    Analysis Results
                  </Typography>
                  <Divider sx={{ mb: 2 }} />
                  <Typography variant="body1" paragraph>
                    {result.content}
                  </Typography>
                  <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>
                    <Typography variant="caption" color="text.secondary">
                      Generated at: {new Date(result.timestamp).toLocaleString()}
                    </Typography>
                  </Box>
                </Box>
              )}
            </Paper>
          )}
        </Container>
      </Box>

      {/* Custom Query Dialog */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>Custom Query</DialogTitle>
        <DialogContent>
          <Typography variant="body2" color="text.secondary" paragraph sx={{ mt: 1 }}>
            Describe what you would like to analyze or ask. The AI assistant will provide relevant insights and suggestions.
          </Typography>
          <TextField
            autoFocus
            multiline
            rows={4}
            fullWidth
            variant="outlined"
            placeholder="Example: Which students need additional help with version control?"
            value={customPrompt}
            onChange={(e) => setCustomPrompt(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>Cancel</Button>
          <Button 
            variant="contained" 
            onClick={handleCustomQuerySubmit}
            disabled={!customPrompt.trim()}
          >
            Submit Query
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}
