import React, { useState, useEffect } from 'react'
import {
  Box,
  Container,
  Paper,
  Typography,
  Grid,
  Card,
  CardContent,
  CardActions,
  Button,
  Divider,
  TextField,
  CircularProgress,
  Alert,
  Chip,
  Stack,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from '@mui/material'
import {
  Analytics as AnalyticsIcon,
  Assessment as AssessmentIcon,
  School as SchoolIcon,
  Group as GroupIcon,
  Code as CodeIcon,
  Lightbulb as LightbulbIcon,
  Assignment as AssignmentIcon,
  BugReport as BugReportIcon,
  Insights as InsightsIcon,
  AutoGraph as AutoGraphIcon,
  Psychology as PsychologyIcon,
  Send as SendIcon,
  Refresh as RefreshIcon,
  Groups as GroupsIcon
} from '@mui/icons-material'
import Sidebar from '../components/Sidebar'
import { api } from '../services/api'
import ReactMarkdown from 'react-markdown'
import { useAuth } from '../contexts/AuthContext'

// Define AI assistant feature type
interface AssistantFeature {
  id: string;
  title: string;
  description: string;
  icon: React.ReactNode;
  action: () => void;
}

// Define message type
interface Message {
  role: 'user' | 'assistant';
  content: string;
}

// Define course type
interface Course {
  _id: string;
  name: string;
}

interface Team {
  _id: string;
  name: string;
}

export default function Assistant() {
  const { user } = useAuth()
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [result, setResult] = useState<any>(null)
  const [activeFeature, setActiveFeature] = useState<string | null>(null)
  const [dialogOpen, setDialogOpen] = useState(false)
  const [customPrompt, setCustomPrompt] = useState('')
  const [input, setInput] = useState('')
  const [messages, setMessages] = useState<Message[]>([])
  const [courses, setCourses] = useState<Course[]>([])
  const [teams, setTeams] = useState<Team[]>([])
  
  // Course selection dialog state
  const [openCourseDialog, setOpenCourseDialog] = useState(false)
  const [selectedCourse, setSelectedCourse] = useState('')
  const [selectedTeam, setSelectedTeam] = useState('')
  const [analysisType, setAnalysisType] = useState('collaboration') // collaboration, code, progress

  // Handle AI request
  const handleAIRequest = async (prompt: string, context?: any) => {
    setLoading(true)
    setError(null)
    setResult(null)
    
    try {
      // This will be replaced with actual AI API call
      console.log('AI Request:', { prompt, context })
      
      // Mock API call delay
      await new Promise(resolve => setTimeout(resolve, 1500))
      
      // Mock API call
      const mockResult = {
        content: `This is the analysis result for "${prompt}". When implemented, this will display the content generated by AI.`,
        timestamp: new Date().toISOString()
      }
      
      setResult(mockResult)
    } catch (err: any) {
      setError(err.message || 'Failed to contact AI assistant')
    } finally {
      setLoading(false)
    }
  }

  // Define assistant features
  const assistantFeatures: AssistantFeature[] = [
    {
      id: 'course-progress',
      title: 'Course Progress Analysis',
      description: 'Analyze team progress and identify students who need additional support',
      icon: <AutoGraphIcon fontSize="large" color="primary" />,
      action: () => {
        // Open course selection dialog
        handleOpenCourseProgress();
      }
    },
    {
      id: 'team-collaboration',
      title: 'Team Collaboration',
      description: 'Analyze team dynamics and identify potential collaboration issues',
      icon: <GroupIcon fontSize="large" color="primary" />,
      action: () => {
        // Open team selection dialog
        handleOpenTeamCollaboration();
      }
    },
    {
      id: 'learning-patterns',
      title: 'Learning Patterns',
      description: 'Identify learning patterns and provide personalized teaching recommendations',
      icon: <PsychologyIcon fontSize="large" color="primary" />,
      action: () => {
        // Open team selection dialog, but set different analysis type
        handleOpenLearningPatterns();
      }
    },
    {
      id: 'issue-checker',
      title: 'Issue Checker',
      description: 'Evaluate team\'s problem-solving abilities by analyzing GitHub issues',
      icon: <BugReportIcon fontSize="large" color="primary" />,
      action: () => {
        // 打开团队选择对话框，设置分析类型为 issues
        handleOpenIssueChecker();
      }
    }
  ]

  // Handle custom query submission
  const handleCustomQuerySubmit = () => {
    if (!customPrompt.trim()) return
    
    setDialogOpen(false)
    setActiveFeature('custom-query')
    handleAIRequest(customPrompt)
    setCustomPrompt('')
  }

  // Get course list
  useEffect(() => {
    const fetchCourses = async () => {
      try {
        const { data } = await api.get('/courses')
        setCourses(data)
      } catch (error) {
        console.error('Failed to fetch courses:', error)
      }
    }
    
    fetchCourses()
  }, [])
  
  // Handle course selection
  const handleCourseChange = async (courseId) => {
    setSelectedCourse(courseId)
    
    try {
      const { data } = await api.get(`/courses/${courseId}`)
      if (data.teamsList) {
        setTeams(data.teamsList)
      }
    } catch (error) {
      console.error('Failed to fetch teams for course:', error)
    }
  }
  
  // Open team collaboration analysis dialog
  const handleOpenTeamCollaboration = () => {
    setAnalysisType('collaboration');
    setOpenCourseDialog(true);
    
    // If courses are not loaded yet, load them
    if (courses.length === 0) {
      const fetchCourses = async () => {
        try {
          const { data } = await api.get('/courses');
          setCourses(data);
        } catch (error) {
          console.error('Failed to fetch courses:', error);
        }
      };
      fetchCourses();
    }
  }
  
  // Close dialog
  const handleCloseDialog = () => {
    setOpenCourseDialog(false)
    setSelectedTeam('')
  }
  
  // Open course progress analysis dialog
  const handleOpenCourseProgress = () => {
    setAnalysisType('progress');
    setOpenCourseDialog(true);
    
    // If courses are not loaded yet, load them
    if (courses.length === 0) {
      const fetchCourses = async () => {
        try {
          const { data } = await api.get('/courses');
          setCourses(data);
        } catch (error) {
          console.error('Failed to fetch courses:', error);
        }
      };
      fetchCourses();
    }
  }
  
  // Open learning patterns analysis dialog
  const handleOpenLearningPatterns = () => {
    setAnalysisType('learning');
    setOpenCourseDialog(true);
    
    // If courses are not loaded yet, load them
    if (courses.length === 0) {
      const fetchCourses = async () => {
        try {
          const { data } = await api.get('/courses');
          setCourses(data);
        } catch (error) {
          console.error('Failed to fetch courses:', error);
        }
      };
      fetchCourses();
    }
  }
  
  // Open Issue Checker analysis dialog
  const handleOpenIssueChecker = () => {
    setAnalysisType('issues');
    setOpenCourseDialog(true);
    
    // If courses are not loaded yet, load them
    if (courses.length === 0) {
      const fetchCourses = async () => {
        try {
          const { data } = await api.get('/courses');
          setCourses(data);
        } catch (error) {
          console.error('Failed to fetch courses:', error);
        }
      };
      fetchCourses();
    }
  }
  
  // Modify handleGenerateAnalysis function
  const handleGenerateAnalysis = async () => {
    // For course progress analysis, only check course ID
    if (analysisType === 'progress' && !selectedCourse) return;
    // For team collaboration, learning patterns and issue checker analysis, check team ID
    if ((analysisType === 'collaboration' || analysisType === 'learning' || analysisType === 'issues') && !selectedTeam) return;
    
    try {
      setLoading(true);
      setError(null);
      
      // Set active feature
      if (analysisType === 'progress') {
        setActiveFeature('course-progress');
      } else if (analysisType === 'learning') {
        setActiveFeature('learning-patterns');
      } else if (analysisType === 'issues') {
        setActiveFeature('issue-checker');
      } else {
        setActiveFeature('team-collaboration');
      }
      
      // Immediately close dialog to let user know request is being processed
      handleCloseDialog();
      
      // Select different API endpoints based on analysis type
      let endpoint = '/ai/analyze-team';
      let requestData: any = {
        teamId: selectedTeam,
        analysisType: analysisType
      };
      
      // If course progress analysis, use different endpoint and data
      if (analysisType === 'progress') {
        endpoint = '/ai/analyze-course';
        requestData = {
          courseId: selectedCourse,
          analysisType: analysisType
        };
      }
      
      // Send request
      const { data } = await api.post(endpoint, requestData);
      
      console.log('Analysis response:', data);
      
      // Set result
      setResult({
        content: data.analysis,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('Failed to generate analysis:', error);
      setError('Failed to generate analysis. Please try again.');
    } finally {
      setLoading(false);
    }
  };
  
  // Send normal message
  const handleSendMessage = async () => {
    if (!input.trim() || loading) return
    
    const userMessage: Message = { role: 'user', content: input }
    setMessages(prev => [...prev, userMessage])
    setInput('')
    setLoading(true)
    
    try {
      const { data } = await api.post('/ai/chat', {
        messages: [...messages, userMessage]
      })
      
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: data.response
      }])
    } catch (error) {
      console.error('Failed to get AI response:', error)
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: 'Sorry, I encountered an error. Please try again later.'
      }])
    } finally {
      setLoading(false)
    }
  }

  return (
    <Box sx={{ display: 'flex' }}>
      <Sidebar />
      <Box component="main" sx={{ flexGrow: 1, height: '100vh', overflow: 'auto', bgcolor: 'grey.100' }}>
        <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
          <Typography variant="h4" component="h1" gutterBottom>
            AI Teaching Assistant
          </Typography>
          <Typography variant="body1" color="text.secondary" paragraph>
            Leverage AI to analyze course data and gain insights to enhance teaching effectiveness.
          </Typography>

          {/* AI Features */}
          <Grid container spacing={3} sx={{ mb: 4 }}>
            {assistantFeatures.map((feature) => (
              <Grid item xs={12} sm={6} md={3} key={feature.id}>
                <Card 
                  sx={{ 
                    height: '100%', 
                    display: 'flex', 
                    flexDirection: 'column',
                    transition: 'transform 0.2s, box-shadow 0.2s',
                    '&:hover': {
                      transform: 'translateY(-4px)',
                      boxShadow: 4
                    }
                  }}
                >
                  <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column', alignItems: 'center', textAlign: 'center' }}>
                    <Box sx={{ mb: 2 }}>
                      {feature.icon}
                    </Box>
                    <Typography variant="h6" component="h3" gutterBottom>
                      {feature.title}
                    </Typography>
                    <Typography variant="body2" color="text.secondary" sx={{ flexGrow: 1, mb: 2 }}>
                      {feature.description}
                    </Typography>
                  </CardContent>
                  <CardActions sx={{ justifyContent: 'center', pb: 2 }}>
                    <Button 
                      variant="outlined" 
                      color="primary"
                      onClick={feature.action}
                    >
                      Use This Feature
                    </Button>
                  </CardActions>
                </Card>
              </Grid>
            ))}
          </Grid>

          {/* Results Area */}
          {(loading || error || result) && (
            <Paper sx={{ p: 3, mt: 3 }}>
              {loading && (
                <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
                  <CircularProgress />
                </Box>
              )}
              
              {error && (
                <Alert severity="error" sx={{ mb: 2 }}>
                  {error}
                </Alert>
              )}
              
              {result && (
                <Box>
                  <Typography variant="h5" gutterBottom>
                    Analysis Results
                  </Typography>
                  <Divider sx={{ mb: 2 }} />
                  <Paper sx={{ p: 2, maxHeight: '60vh', overflow: 'auto' }}>
                    <ReactMarkdown>
                      {result.content}
                    </ReactMarkdown>
                  </Paper>
                  <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>
                    <Typography variant="caption" color="text.secondary">
                      Generated at: {new Date(result.timestamp).toLocaleString()}
                    </Typography>
                  </Box>
                </Box>
              )}
            </Paper>
          )}
        </Container>
      </Box>

      {/* Custom Query Dialog */}
      <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>Custom Query</DialogTitle>
        <DialogContent>
          <Typography variant="body2" color="text.secondary" paragraph sx={{ mt: 1 }}>
            Describe what you would like to analyze or ask. The AI assistant will provide relevant insights and suggestions.
          </Typography>
          <TextField
            autoFocus
            multiline
            rows={4}
            fullWidth
            variant="outlined"
            placeholder="Example: Which students need additional help with version control?"
            value={customPrompt}
            onChange={(e) => setCustomPrompt(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setDialogOpen(false)}>Cancel</Button>
          <Button 
            variant="contained" 
            onClick={handleCustomQuerySubmit}
            disabled={!customPrompt.trim()}
          >
            Submit Query
          </Button>
        </DialogActions>
      </Dialog>

      {/* Course Selection Dialog */}
      <Dialog open={openCourseDialog} onClose={handleCloseDialog} maxWidth="sm" fullWidth>
        <DialogTitle>
          {analysisType === 'progress' 
            ? 'Select Course for Progress Analysis' 
            : analysisType === 'learning'
              ? 'Select Team for Learning Patterns Analysis'
              : analysisType === 'issues'
                ? 'Select Team for Issue Checker'
                : 'Select Team for Collaboration Analysis'}
        </DialogTitle>
        <DialogContent>
          <FormControl fullWidth sx={{ mt: 2, mb: 2 }}>
            <InputLabel>Course</InputLabel>
            <Select
              value={selectedCourse}
              label="Course"
              onChange={(e) => handleCourseChange(e.target.value)}
            >
              {courses.map((course) => (
                <MenuItem key={course._id} value={course._id}>
                  {course.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          
          {/* Display team selection for team collaboration, learning patterns and issue checker analysis */}
          {(analysisType === 'collaboration' || analysisType === 'learning' || analysisType === 'issues') && selectedCourse && (
            <FormControl fullWidth sx={{ mb: 2 }}>
              <InputLabel>Team</InputLabel>
              <Select
                value={selectedTeam}
                label="Team"
                onChange={(e) => setSelectedTeam(e.target.value)}
              >
                {teams.map((team) => (
                  <MenuItem key={team._id} value={team._id}>
                    {team.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>Cancel</Button>
          <Button 
            onClick={handleGenerateAnalysis} 
            variant="contained" 
            disabled={
              (analysisType === 'progress' && !selectedCourse) || 
              ((analysisType === 'collaboration' || analysisType === 'learning' || analysisType === 'issues') && (!selectedCourse || !selectedTeam))
            }
          >
            Generate Analysis
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  )
}
